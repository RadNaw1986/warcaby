{"ast":null,"code":"var _jsxFileName = \"G:\\\\PROGRAMY\\\\Node.js\\\\warcaby\\\\frontend\\\\src\\\\components\\\\Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst axios = require('axios'); //wczesniej było: import axios from 'axios' i wywalało błąd\n\nconst BoardSize = 8; // Rozmiar planszy warcabowej (8x8)\n\nconst Board = () => {\n  _s();\n  const [board, setBoard] = useState(createInitialBoard());\n  const [activePlayer, setActivePlayer] = useState(1);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const [selectedCol, setSelectedCol] = useState(null);\n  const handleSquareClick = (row, col) => {\n    const piece = board[row][col];\n    if (!piece) {\n      const isValidMove = checkValidMove(row, col);\n      if (isValidMove) {\n        const updatedBoard = movePiece(row, col);\n        setBoard(updatedBoard);\n        setActivePlayer(activePlayer === 1 ? 2 : 1);\n\n        // Sprawdzenie, czy istnieje możliwość wielokrotnego bicia\n        const canContinueCapture = checkContinuedCapture(row, col);\n        if (!canContinueCapture) {\n          setSelectedRow(null);\n          setSelectedCol(null);\n        }\n      }\n    } else {\n      setSelectedRow(row);\n      setSelectedCol(col);\n    }\n  };\n  const createInitialBoard = () => {\n    const initialBoard = Array(BoardSize).fill(null).map(() => Array(BoardSize).fill(null));\n\n    // Ustawienie początkowych pionków na planszy\n    for (let row = 0; row < BoardSize; row++) {\n      for (let col = 0; col < BoardSize; col++) {\n        if ((row + col) % 2 === 1 && row < 3) {\n          initialBoard[row][col] = {\n            player: 1,\n            isKing: false\n          }; // Gracz 1\n        } else if ((row + col) % 2 === 1 && row > 4) {\n          initialBoard[row][col] = {\n            player: 2,\n            isKing: false\n          }; // Gracz 2\n        }\n      }\n    }\n\n    return initialBoard;\n  };\n  const checkValidMove = (row, col) => {\n    // Sprawdź poprawność ruchu dla wybranego pola\n    const piece = board[row][col];\n\n    // Sprawdzenie, czy pole jest puste\n    if (piece) {\n      return false;\n    }\n\n    // Sprawdzenie, czy ruch jest przekątny\n    const selectedPiece = board[selectedRow][selectedCol];\n    const rowDiff = Math.abs(row - selectedRow);\n    const colDiff = Math.abs(col - selectedCol);\n    if (rowDiff !== colDiff) {\n      return false;\n    }\n\n    // Sprawdzenie, czy ruch jest dozwolony w zależności od stanu planszy\n    const isKing = selectedPiece.isKing;\n    const player = selectedPiece.player;\n\n    // Sprawdzenie, czy ruch w przód jest dozwolony dla gracza 1 i 2\n    if (!isKing && (player === 1 && row < selectedRow || player === 2 && row > selectedRow)) {\n      return false;\n    }\n\n    // Sprawdzenie, czy ruch w tył jest dozwolony dla damki\n    if (isKing && rowDiff === 1 && colDiff === 1) {\n      return true;\n    }\n\n    // Sprawdzenie, czy pole docelowe jest puste\n    if (board[row][col]) {\n      return false;\n    }\n\n    // Sprawdzenie, czy ruch jest o 1 pole\n    if (rowDiff !== 1 || colDiff !== 1) {\n      return false;\n    }\n\n    // Sprawdzenie, czy ruch jest o 2 pola przy bicie pionka przeciwnika\n    const middleRow = (row + selectedRow) / 2;\n    const middleCol = (col + selectedCol) / 2;\n    const middlePiece = board[middleRow][middleCol];\n    if (Math.abs(row - selectedRow) === 2 && Math.abs(col - selectedCol) === 2 && middlePiece && middlePiece.player !== player) {\n      return true;\n    }\n\n    // Sprawdzenie, czy pole docelowe jest na planszy\n    if (row < 0 || row >= BoardSize || col < 0 || col >= BoardSize) {\n      return false;\n    }\n    return true; // Zwróć true, jeśli ruch jest poprawny\n  };\n\n  const movePiece = (row, col) => {\n    // Przenieś pionek na docelowe pole\n    const updatedBoard = [...board];\n    const selectedPiece = updatedBoard[selectedRow][selectedCol];\n    updatedBoard[row][col] = selectedPiece;\n    updatedBoard[selectedRow][selectedCol] = null;\n\n    // Sprawdzenie, czy pionek osiągnął przeciwną stronę planszy i promocja na damkę\n    if (row === 0 && activePlayer === 1) {\n      updatedBoard[row][col].isKing = true;\n    } else if (row === BoardSize - 1 && activePlayer === 2) {\n      updatedBoard[row][col].isKing = true;\n    }\n\n    // Sprawdzenie, czy istnieje możliwość bicia pionka przeciwnika\n    const middleRow = (row + selectedRow) / 2;\n    const middleCol = (col + selectedCol) / 2;\n    if (Math.abs(row - selectedRow) === 2 && Math.abs(col - selectedCol) === 2) {\n      updatedBoard[middleRow][middleCol] = null;\n\n      // Sprawdzenie, czy pionek może kontynuować bicie\n      const canContinueCapture = checkContinuedCapture(row, col);\n      if (!canContinueCapture) {\n        setSelectedRow(null);\n        setSelectedCol(null);\n      }\n    }\n    return updatedBoard;\n  };\n  const checkContinuedCapture = (row, col) => {\n    const piece = board[row][col];\n\n    // Sprawdzenie, czy pionek może kontynuować bicie\n    const possibleMoves = [{\n      row: row + 2,\n      col: col + 2\n    }, {\n      row: row + 2,\n      col: col - 2\n    }, {\n      row: row - 2,\n      col: col + 2\n    }, {\n      row: row - 2,\n      col: col - 2\n    }];\n    for (const move of possibleMoves) {\n      if (checkValidMove(move.row, move.col)) {\n        const middleRow = (move.row + row) / 2;\n        const middleCol = (move.col + col) / 2;\n        if (board[middleRow][middleCol] && board[middleRow][middleCol].player !== piece.player) {\n          return true; // Istnieje możliwość kontynuacji bicia\n        }\n      }\n    }\n\n    return false; // Brak możliwości kontynuacji bicia\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Warcaby\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      board: board,\n      handleClick: handleSquareClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"jO3lUPqY+D68JC+y6g+xfCsZWmM=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","axios","require","BoardSize","Board","_s","board","setBoard","createInitialBoard","activePlayer","setActivePlayer","selectedRow","setSelectedRow","selectedCol","setSelectedCol","handleSquareClick","row","col","piece","isValidMove","checkValidMove","updatedBoard","movePiece","canContinueCapture","checkContinuedCapture","initialBoard","Array","fill","map","player","isKing","selectedPiece","rowDiff","Math","abs","colDiff","middleRow","middleCol","middlePiece","possibleMoves","move","className","children","fileName","_jsxFileName","lineNumber","columnNumber","handleClick","_c","$RefreshReg$"],"sources":["G:/PROGRAMY/Node.js/warcaby/frontend/src/components/Board.js"],"sourcesContent":["import React, { useState } from 'react';\nconst axios = require('axios'); //wczesniej było: import axios from 'axios' i wywalało błąd\n\nconst BoardSize = 8; // Rozmiar planszy warcabowej (8x8)\n\nconst Board = () => {\n  const [board, setBoard] = useState(createInitialBoard());\n  const [activePlayer, setActivePlayer] = useState(1);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const [selectedCol, setSelectedCol] = useState(null);\n\n  const handleSquareClick = (row, col) => {\n    const piece = board[row][col];\n\n    if (!piece) {\n      const isValidMove = checkValidMove(row, col);\n\n      if (isValidMove) {\n        const updatedBoard = movePiece(row, col);\n        setBoard(updatedBoard);\n        setActivePlayer(activePlayer === 1 ? 2 : 1);\n\n        // Sprawdzenie, czy istnieje możliwość wielokrotnego bicia\n        const canContinueCapture = checkContinuedCapture(row, col);\n        if (!canContinueCapture) {\n          setSelectedRow(null);\n          setSelectedCol(null);\n        }\n      }\n    } else {\n      setSelectedRow(row);\n      setSelectedCol(col);\n    }\n  };\n\n  const createInitialBoard = () => {\n    const initialBoard = Array(BoardSize)\n      .fill(null)\n      .map(() => Array(BoardSize).fill(null));\n\n    // Ustawienie początkowych pionków na planszy\n    for (let row = 0; row < BoardSize; row++) {\n      for (let col = 0; col < BoardSize; col++) {\n        if ((row + col) % 2 === 1 && row < 3) {\n          initialBoard[row][col] = { player: 1, isKing: false }; // Gracz 1\n        } else if ((row + col) % 2 === 1 && row > 4) {\n          initialBoard[row][col] = { player: 2, isKing: false }; // Gracz 2\n        }\n      }\n    }\n\n    return initialBoard;\n  };\n\n  const checkValidMove = (row, col) => {\n    // Sprawdź poprawność ruchu dla wybranego pola\n    const piece = board[row][col];\n\n    // Sprawdzenie, czy pole jest puste\n    if (piece) {\n      return false;\n    }\n\n    // Sprawdzenie, czy ruch jest przekątny\n    const selectedPiece = board[selectedRow][selectedCol];\n    const rowDiff = Math.abs(row - selectedRow);\n    const colDiff = Math.abs(col - selectedCol);\n\n    if (rowDiff !== colDiff) {\n      return false;\n    }\n\n    // Sprawdzenie, czy ruch jest dozwolony w zależności od stanu planszy\n    const isKing = selectedPiece.isKing;\n    const player = selectedPiece.player;\n\n    // Sprawdzenie, czy ruch w przód jest dozwolony dla gracza 1 i 2\n    if (!isKing && ((player === 1 && row < selectedRow) || (player === 2 && row > selectedRow))) {\n      return false;\n    }\n\n    // Sprawdzenie, czy ruch w tył jest dozwolony dla damki\n    if (isKing && rowDiff === 1 && colDiff === 1) {\n      return true;\n    }\n\n    // Sprawdzenie, czy pole docelowe jest puste\n    if (board[row][col]) {\n      return false;\n    }\n\n    // Sprawdzenie, czy ruch jest o 1 pole\n    if (rowDiff !== 1 || colDiff !== 1) {\n      return false;\n    }\n\n    // Sprawdzenie, czy ruch jest o 2 pola przy bicie pionka przeciwnika\n    const middleRow = (row + selectedRow) / 2;\n    const middleCol = (col + selectedCol) / 2;\n    const middlePiece = board[middleRow][middleCol];\n\n    if (Math.abs(row - selectedRow) === 2 && Math.abs(col - selectedCol) === 2 && middlePiece && middlePiece.player !== player) {\n      return true;\n    }\n\n    // Sprawdzenie, czy pole docelowe jest na planszy\n    if (row < 0 || row >= BoardSize || col < 0 || col >= BoardSize) {\n      return false;\n    }\n\n    return true; // Zwróć true, jeśli ruch jest poprawny\n  };\n\n  const movePiece = (row, col) => {\n    // Przenieś pionek na docelowe pole\n    const updatedBoard = [...board];\n    const selectedPiece = updatedBoard[selectedRow][selectedCol];\n\n    updatedBoard[row][col] = selectedPiece;\n    updatedBoard[selectedRow][selectedCol] = null;\n\n    // Sprawdzenie, czy pionek osiągnął przeciwną stronę planszy i promocja na damkę\n    if (row === 0 && activePlayer === 1) {\n      updatedBoard[row][col].isKing = true;\n    } else if (row === BoardSize - 1 && activePlayer === 2) {\n      updatedBoard[row][col].isKing = true;\n    }\n\n    // Sprawdzenie, czy istnieje możliwość bicia pionka przeciwnika\n    const middleRow = (row + selectedRow) / 2;\n    const middleCol = (col + selectedCol) / 2;\n\n    if (Math.abs(row - selectedRow) === 2 && Math.abs(col - selectedCol) === 2) {\n      updatedBoard[middleRow][middleCol] = null;\n\n      // Sprawdzenie, czy pionek może kontynuować bicie\n      const canContinueCapture = checkContinuedCapture(row, col);\n      if (!canContinueCapture) {\n        setSelectedRow(null);\n        setSelectedCol(null);\n      }\n    }\n\n    return updatedBoard;\n  };\n\n  const checkContinuedCapture = (row, col) => {\n    const piece = board[row][col];\n\n    // Sprawdzenie, czy pionek może kontynuować bicie\n    const possibleMoves = [\n      { row: row + 2, col: col + 2 },\n      { row: row + 2, col: col - 2 },\n      { row: row - 2, col: col + 2 },\n      { row: row - 2, col: col - 2 },\n    ];\n\n    for (const move of possibleMoves) {\n      if (checkValidMove(move.row, move.col)) {\n        const middleRow = (move.row + row) / 2;\n        const middleCol = (move.col + col) / 2;\n\n        if (board[middleRow][middleCol] && board[middleRow][middleCol].player !== piece.player) {\n          return true; // Istnieje możliwość kontynuacji bicia\n        }\n      }\n    }\n\n    return false; // Brak możliwości kontynuacji bicia\n  };\n\n  return (\n    <div className=\"game\">\n      <h1>Warcaby</h1>\n      <Board board={board} handleClick={handleSquareClick} />\n    </div>\n  );\n};\n\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}